Metadata-Version: 2.4
Name: diffusion-smc
Version: 0.0.0
Author: Angus Phillips, Michael Hutchinson, Hai-Dang Dau
Author-email: angus.phillips@stats.ox.ac.uk
Classifier: Programming Language :: Python :: 3.9
Classifier: Operating System :: OS Independent
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: jax==0.4.17
Requires-Dist: jaxlib==0.4.17
Requires-Dist: keras>=3.5.0
Requires-Dist: tensorflow
Requires-Dist: tensorflow-probability
Requires-Dist: torch
Requires-Dist: numpyro
Requires-Dist: inference_gym
Requires-Dist: diffrax
Requires-Dist: dm-haiku
Requires-Dist: optax
Requires-Dist: equinox
Requires-Dist: flax
Requires-Dist: tqdm
Requires-Dist: matplotlib
Requires-Dist: seaborn
Requires-Dist: jaxtyping
Requires-Dist: chex
Requires-Dist: check_shapes
Requires-Dist: fsspec
Requires-Dist: jupytext
Requires-Dist: gpustat
Requires-Dist: wandb
Requires-Dist: hydra_core==1.1.1
Requires-Dist: hydra_colorlog==1.1
Requires-Dist: hydra-joblib-launcher==1.1.5
Requires-Dist: submitit
Requires-Dist: hydra-submitit-launcher
Requires-Dist: black
Requires-Dist: ipykernel
Requires-Dist: ipywidgets
Requires-Dist: matplotlib
Requires-Dist: seaborn
Requires-Dist: jupyter
Requires-Dist: tensorflow
Requires-Dist: tensorflow-probability
Requires-Dist: torch
Requires-Dist: numpyro
Requires-Dist: hydra-core==1.1.1
Requires-Dist: hydra_colorlog==1.1
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: keywords
Dynamic: license-file
Dynamic: requires-dist

# Particle Denoising Diffusion Sampler

[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)

## Installation

Simple installation instructions are:

```
git clone https://github.com/angusphillips/pdds.git
cd pdds
conda create -n {ENV_NAME} python=3.9
source activate {ENV_NAME}
conda install jaxlib=*=*cuda* jax cuda-nvcc -c conda-forge -c nvidia
pip install -e .
```

You can test the installation by running our unit tests:
```
python -m unittest discover tests
```

## Code Layout

We use Hydra to manage configs and WandB for logging. Default configs for all experiments in the paper are found in `/config/`. 

An interactive demonstration of our code can be found in `/notebooks/gaussian_example.ipynb`.

Our experiments can be run from the command line: 
```
python main.py experiment=<EXPERIMENT> <additional_arg=additional_value>
```
For example to run our method on the 2d Gaussian mixture task using 4 steps:
```
python main.py experiment=difficult_2d steps_mult=4 seed=1
```


The main arguments of interest are:
* `experiment`: specifies the task, available options in `/config/experiments/`
* `steps_mult`: controls the number of steps (resolves as base_steps * steps_mult)
* `seed`: sets global seed

Further arguments can be explored in the config files. 

## Cite
If you use this code in your work, please cite our paper:
```
@misc{phillips2024particle,
      title={Particle Denoising Diffusion Sampler}, 
      author={Angus Phillips and Hai-Dang Dau and Michael John Hutchinson and Valentin De Bortoli and George Deligiannidis and Arnaud Doucet},
      year={2024},
      eprint={2402.06320},
      archivePrefix={arXiv},
      primaryClass={stat.ML}
}
```
